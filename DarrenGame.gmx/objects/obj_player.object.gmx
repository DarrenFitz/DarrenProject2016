<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stopped</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initilise Variables
grav = 0.25;
vsp =0;
hsp =0;
hsp_carry = 0;
movespeed = 4;

numjumps = 0;
maxjumps = 2;
jumpspeed_normal = 7;
jumpspeed_powerup = 9;

jumpspeed = jumpspeed_normal


if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_player_stopped;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_down = keyboard_check(vk_down);

move = key_left + key_right;
hsp = move * movespeed;

if (vsp &lt; 10) vsp += grav;

if (place_meeting(x, y+1, obj_wall))
{
    numjumps = maxjumps;
}

if (key_jump) &amp;&amp; (numjumps &gt; 0)
{
    numjumps -= 1;
    vsp = -jumpspeed;
}

//jump against walls
//if (key_jump) &amp;&amp; (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall))
//{ 
     //vsp = -jumpspeed;  
//}

var hsp_final =  hsp + hsp_carry;// when player leaves platform speed is equal to original speed
hsp_carry = 0; 

//collision detection horizontal so player doesnt walk through wall
if (place_meeting(x+hsp_final,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x += sign(hsp_final); //sign return integer of either 1,-1,or 0 depending on value in brackets
    }
    hsp_final = 0;
    hsp=0;
}
x += hsp_final;

//collision detection vertical so player doesnt jump up through wall
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
        
    }
      
    vsp=0
}
y += vsp;

//Collision lava
if(place_meeting(x,y-1,obj_lava))
{
    scr_death();
}

if(place_meeting(x,y,obj_enemy_2))
{
    scr_death();
}

//animate the player to jog 

if (move != 0)
{
    image_xscale = move; //allows the player to be flipped when moving left or right direction
}

if (place_meeting(x,y+1,obj_wall)) 
{
    if(move != 0) 
    {
        sprite_index = spr_player_jog; 
    }
    else 
    {
        sprite_index = spr_player_stopped;
    }
}

else 
{
    if (vsp &lt; 0 ) 
    {
        sprite_index = spr_player_up; 
    }
    else 
    {
        sprite_index = spr_player_down;
    }
}
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
